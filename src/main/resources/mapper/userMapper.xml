<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 如果采用接口形式的调用，则这里是接口类的路径，如果是statement形式的调用则这里是map.xml的路径 ,所以这里一般吧mapping文件和接口文件放在同一目录下
并且maping和map接口的名称形同
-->
<mapper namespace="mybatis.dao.UserMapper">
<!-- <mapper namespace="mybatis.mapper.userMapper"> -->
<!-- 这里点击文件包名称，要具有唯一性，因此用全名称，copy可以快速copy包的名称路径，past -->
<!-- parameterType  的类型可以是复杂对象也可以是简单类型 -->
	<select id="getUser" parameterType="int" resultType="mybatis.mapper.User">
		select * from users where id=#{id}
	</select>
	
	<select id="insert" parameterType="mybatis.mapper.User">
		insert into users(id, name) values(#{id},#{name})
	</select>
	
	<select id="delete" parameterType="int">
	   delete  from users where id=#{id}
	</select>
	
	<select id="updateById" parameterType="mybatis.mapper.User">
		 update users  set name=#{name},age=#{age} where id=#{id}
	</select>
	
	
	
	<!-- mybatis调用存储过程！ -->
	 <select id="getUserCount" parameterMap="getUserCountMap" statementType="CALLABLE">
          CALL mybatis.ges_user_count(?,?)
      </select>
 
  <parameterMap type="java.util.Map" id="getUserCountMap">
         <parameter property="sexid" mode="IN" jdbcType="INTEGER"/>
         <parameter property="usercount" mode="OUT" jdbcType="INTEGER"/>
	</parameterMap>
	
	<!-- 开启二级缓存 -->
	 <!--回收策略为先进先出-->
	 <!--自动刷新时间60s-->
	 <!--最多缓存512个引用对象-->
	 <!--只读-->
<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>


<select id ="getVClassStudent" resultType= "java.util.Map" parameterType ="java.lang.Integer">
select
c_id,s_name 
from v_class_student where c_id = #{id}
</select > 
</mapper>
